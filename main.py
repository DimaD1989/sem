# üìå–°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å –ú–æ—è –°—Ç—Ä–æ–∫–∞, –≥–¥–µ: üìå–±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ str üìå–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Ö—Ä–∞–Ω—è—Ç—Å—è –∏–º—è –∞–≤—Ç–æ—Ä–∞ —Å—Ç—Ä–æ–∫–∏ –∏ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è (time.time)
# class NamedInt(int):
#     def __new__(cls, value, name):
#         instance = super().__new__(cls, value)
#         instance.name = name
#         print(f'–°–æ–∑–¥–∞–ª –∫–ª–∞—Å—Å {cls}')
#         return instance
#
# '''
# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ1
# –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å –ú–æ—è –°—Ç—Ä–æ–∫–∞, –≥–¥–µ:
# –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ str
# –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Ö—Ä–∞–Ω—è—Ç—Å—è –∏–º—è –∞–≤—Ç–æ—Ä–∞ —Å—Ç—Ä–æ–∫–∏ –∏ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
# (time.time)
# –î–æ–±–∞–≤—å—Ç–µ  —Å—Ç—Ä–æ–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è –∫–ª–∞—Å—Å–æ–≤.
# '''
# import datetime
#
#
# class MyStr(str):
#     """
#     My class  comment
#     """
#     d = 5
#
#     def __new__(cls, value, author_name):
#         """
#         –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä
#         :param value:
#         :param author_name:
#         creation_time = datetime.datetime.now()
#         """
#         instance = super().__new__(cls, value)
#         instance.author_name = author_name
#         instance.creation_time = datetime.datetime.now()
#         return instance
#
#
# if __name__ == '__main__':
#
#     s = MyStr("–°—Ç—Ä–æ–∫–∞", '–ò–ª—é—à–∞')            # –∫ —ç—Ç–æ–º—É –∫–ª–∞—Å—Å—É —Ç–µ–ø–µ—Ä—å –≤—Å–µ –º–µ—Ç–æ–¥—ã str –ø—Ä–∏–º–µ–Ω–∏–º—ã
#     print(s, s.author_name, s.creation_time)
#     print(s.upper())
#     #print(s.upper().author_name)
#
#     print(MyStr.__doc__)
#     print(MyStr.__new__.__doc__)
#     print(help(MyStr))
    #
    # üìå–°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å –ê—Ä—Ö–∏–≤, –∫–æ—Ç–æ—Ä—ã–π —Ö—Ä–∞–Ω–∏—Ç –ø–∞—Ä—É —Å–≤–æ–π—Å—Ç–≤.–ù–∞–ø—Ä–∏–º–µ—Ä, —á–∏—Å–ª–æ –∏ —Å—Ç—Ä–æ–∫—É. üìå–ü—Ä–∏ –Ω–æ–≤–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞  –∫–ª–∞—Å—Å–∞, —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–∞–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö  —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤  —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ø–∞—Ä—É  —Å–ø–∏—Å–∫–æ–≤–∞—Ä—Ö–∏–≤–æ–≤ üìålist - –∞—Ä—Ö–∏–≤—ã —Ç–∞–∫–∂–µ —è–≤–ª—è—é—Ç—Å—è —Å–≤–æ–π—Å—Ç–≤–∞–º–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
# class Archive:
#
#     numbers_archive = []
#     some_strs_archive = []
#     last_number = None
#     last_str = None
#
#
#     def __init__(self, number, some_str):
#         self.number = number
#         self.some_str = some_str
#
#         if Archive.last_number is not None:
#             Archive.numbers_archive.append(Archive.last_number)
#             Archive.some_strs_archive.append(Archive.last_str)
#         Archive.last_number = number
#         Archive.last_str = some_str
#
#     def __str__(self):
#         return f'Number: {self.number}, string: {self.some_str}, archive: {list(zip(Archive.numbers_archive,Archive.some_strs_archive))} '
#
#
# if __name__ == '__main__':
#     arc1 = Archive(1, "str1")
#     print(arc1)
#     # print(arc1.number, arc1.numbers_archive, Archive.numbers_archive)
#     arc2 = Archive(2, "str2")
#     print(arc2)
#     # print(arc2.number, arc2.numbers_archive, Archive.numbers_archive)
#     arc3 = Archive(3, "str3")
#     print(arc3)
#     # print(arc3.number, arc3.numbers_archive, Archive.numbers_archive)
#
# class Archive:
#     _instance = None
#     _archive = []
#
#     def __new__(cls, name: str, age: int):
#         instance = super().__new__(cls)
#         if cls._instance:
#             cls._archive.append(cls._instance)
#         cls._instance = instance
#         instance.archive = cls._archive
#         return cls._instance
#
#     def __init__(self, name: str, age: int):
#         self.name = name
#         self.age = age
#
#     def __repr__(self):
#         return f'{self.name} {self.age}'




# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ2
# –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å –ê—Ä—Ö–∏–≤, –∫–æ—Ç–æ—Ä—ã–π —Ö—Ä–∞–Ω–∏—Ç –ø–∞—Ä—É —Å–≤–æ–π—Å—Ç–≤.
# –ù–∞–ø—Ä–∏–º–µ—Ä, —á–∏—Å–ª–æ –∏ —Å—Ç—Ä–æ–∫—É.
# –ü—Ä–∏ –Ω–æ–≤–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞, —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–∞–Ω–µ–µ
# —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ø–∞—Ä—É —Å–ø–∏—Å–∫–æ–≤–∞—Ä—Ö–∏–≤–æ–≤
# list-–∞—Ä—Ö–∏–≤—ã —Ç–∞–∫–∂–µ —è–≤–ª—è—é—Ç—Å—è —Å–≤–æ–π—Å—Ç–≤–∞–º–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
#
# –î–æ–±–∞–≤—å—Ç–µ  —Å—Ç—Ä–æ–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è –∫–ª–∞—Å—Å–æ–≤.

'''

class Archive:
    """
    –ê—Ä—Ö–∏–≤, –∫–æ—Ç–æ—Ä—ã–π —Ö—Ä–∞–Ω–∏—Ç –ø–∞—Ä—É —Å–≤–æ–π—Å—Ç–≤. –ü—Ä–∏ –Ω–æ–≤–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞, —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–∞–Ω–µ–µ
    —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ø–∞—Ä—É —Å–ø–∏—Å–∫–æ–≤–∞—Ä—Ö–∏–≤–æ–≤  list-–∞—Ä—Ö–∏–≤—ã —Ç–∞–∫–∂–µ —è–≤–ª—è—é—Ç—Å—è —Å–≤–æ–π—Å—Ç–≤–∞–º–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
    –¥–æ–±–∞–≤–∏—Ç—å repr
    """
    _instance = None

    def __new__(cls, *args, **kwargs):
        """
        –°–ò–ù–ì–õ–¢–û–ù –ü–ê–¢–¢–ï–†–ù
        :param args:
        :param kwargs:
        """
        if cls._instance is None:
            cls._instance = super().__new__(cls)
            cls.numbers_archive = []
            cls.some_strs_archive = []
        else:
            cls._instance.numbers_archive.append(cls._instance.number)
            cls._instance.some_strs_archive.append(cls._instance.some_str)
        return cls._instance

    def __init__(self, number, some_str):
        """
        init
        :param number:
        :param some_str:
        """
        self.number = number
        self.some_str = some_str

    def __str__(self):
        """
        Human-readable representation
        :return:
        """
        return f'Number: {self.number}, string: {self.some_str}, archive: {list(zip(self.numbers_archive,self.some_strs_archive))} '

    def __repr__(self):
        return f'Archive({self.number},{self.some_str})'


if __name__ == '__main__':
    arc1 = Archive(1, "str1")
    print(arc1)
    # print(arc1.number, arc1.numbers_archive, Archive.numbers_archive)
    arc2 = Archive(2, "str2")
    print(arc2)
    # print(arc2.number, arc2.numbers_archive, Archive.numbers_archive)
    arc3 = Archive(3, "str3")
    print(arc3)
    # print(arc3.number, arc3.numbers_archive, Archive.numbers_archive)

    print(Archive.__doc__)
    print(Archive.__new__.__doc__)
    # print(help(Archive))

    print(arc1.__repr__())
    print(arc2.__repr__())
    print(arc3.__repr__())